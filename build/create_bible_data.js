import { bibleData } from "./bible_data";

const fs = require("fs");
const crypto = require("crypto");

const hashFile = (filename) => {
  var f = fs.readFileSync(__dirname + filename);
  var md5 = crypto.createHash("md5");
  md5.update(f, "utf-8");
  return md5.digest("hex");
};

const createJSFile = () => {
  if (
    hashFile("/../frontend/src/lib/Scripture/data.ts") ==
    "3640380b651b9e9c7f1db2438a343dd2"
  )
    return;

  let data = `// DO NOT EDIT - THIS FILE IS AUTOGENERATED\nexport const bibleData = [`;
  for (let i = 0; i < bibleData.length; i++) {
    const bookData = bibleData[i];
    data += `
    {
      name: "${bookData.name}",
      abbreviation: "${bookData.abbreviation}",
      num_chapters: ${bookData.num_chapters},
      num_verses: [${bookData.num_verses.join(",")}],`;
    if (bookData.name == "Psalms") {
      data += `
      superscripts: [${bookData.superscripts.join(",")}],`;
    }
    data += `
      testament: "${bookData.testament}",
      version: [${bookData.version.map((v) => `"${v}"`).join(",")}],
    },`;
  }
  data += "\n] as const;";
  fs.writeFileSync(__dirname + "/../frontend/src/lib/Scripture/data.ts", data);
};

const createGoFile = () => {
  if (
    hashFile("/../internal/app/scripture_data.go") ==
    "b0aeaab51ad7d2903f3bfc9858aa3f34"
  )
    return;

  let data = `package app
// DO NOT EDIT - THIS FILE IS AUTOGENERATED

type BookData struct {
  name         string
  abbreviation string
  num_chapters int
  num_verses   []int
  superscripts []int
  testament    string
  version      []string
}

var bibleData = [...]BookData{`;
  for (let i = 0; i < bibleData.length; i++) {
    const bookData = bibleData[i];
    data += `
	{
		name: "${bookData.name}",
		abbreviation: "${bookData.abbreviation}",
		num_chapters: ${bookData.num_chapters},
		num_verses: []int{${bookData.num_verses.join(",")}},`;
    if (bookData.name == "Psalms") {
      data += `
		superscripts: []int{${bookData.superscripts.join(",")}},`;
    }
    data += `
		testament: "${bookData.testament}",
		version:   []string{${bookData.version.map((v) => `"${v}"`).join(",")}},
	},`;
  }
  data += "}";
  fs.writeFileSync(__dirname + "/../internal/app/scripture_data.go", data);
};

export const createBibleData = () => {
  createJSFile(); // `frontend/src/lib/Scripture/data.ts`
  createGoFile(); // `internal/app/scripture_data.go`
};
