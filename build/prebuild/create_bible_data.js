import { bibleData, versionData } from "./bible_data";

const fs = require("fs");
const crypto = require("crypto");

const hashFile = (filename) => {
  var f = fs.readFileSync(__dirname + filename);
  var md5 = crypto.createHash("md5");
  md5.update(f, "utf-8");
  return md5.digest("hex");
};

const createJSFile = () => {
  let data = `// DO NOT EDIT - THIS FILE IS AUTOGENERATED\nexport const bibleData = [`;
  for (let i = 0; i < bibleData.length; i++) {
    const bookData = bibleData[i];
    data += `
    {
      name: "${bookData.name}",
      abbreviation: "${bookData.abbreviation}",
      num_chapters: ${bookData.num_chapters},
      num_verses: [${bookData.num_verses.join(",")}],`;
    if (bookData.name == "Psalms") {
      data += `
      superscripts: [${bookData.superscripts.join(",")}],`;
    }
    data += `
      testament: "${bookData.testament}",
    },`;
  }
  data += "\n] as const;\n\n";

  data += `export const versionData = [`;
  for (let i = 0; i < versionData.length; i++) {
    const versionInfo = versionData[i];
    data += `
    {
      name: "${versionInfo.name}",
      books: [
${versionInfo.books.map((x) => `        { index: ${x.index}, name: "${x.name}" },`).join("\n")}
      ],
    },`;
  }
  data += `] as const;`;

  fs.writeFileSync(
    __dirname + "/../../frontend/src/lib/Scripture/data.ts",
    data,
  );
};

const createGoFile = () => {
  let data = `package app
// DO NOT EDIT - THIS FILE IS AUTOGENERATED

type BookData struct {
  name         string
  abbreviation string
  num_chapters int
  num_verses   []int
  superscripts []int
  testament    string
}

type VersionBookData struct {
	index int
	name  string
}

type VersionData struct {
	name  string
	books []VersionBookData
}

var bibleData = [...]BookData{`;
  for (let i = 0; i < bibleData.length; i++) {
    const bookData = bibleData[i];
    data += `
  {
    name: "${bookData.name}",
    abbreviation: "${bookData.abbreviation}",
    num_chapters: ${bookData.num_chapters},
    num_verses: []int{${bookData.num_verses.join(",")}},`;
    if (bookData.name == "Psalms") {
      data += `
    superscripts: []int{${bookData.superscripts.join(",")}},`;
    }
    data += `
    testament: "${bookData.testament}",
  },`;
  }
  data += "\n}\n\n";

  data += `var versionData = [...]VersionData{\n`;
  for (let i = 0; i < versionData.length; i++) {
    data += `  {
    name: "${versionData[i].name}",
    books: []VersionBookData{`;
    for (let j = 0; j < versionData[i].books.length; j++) {
      data += `
      {
        index: ${versionData[i].books[j].index},
        name:  "${versionData[i].books[j].name}",
      },`;
    }
    data += `\n    },\n  },\n`;
  }
  data += `}`;

  fs.writeFileSync(__dirname + "/../../internal/app/scripture_data.go", data);
};

export const createBibleData = () => {
  // Ensure this code only gets run on file change to `bible_data.js`
  let hash = hashFile("/bible_data.js");
  if (hash == fs.readFileSync(__dirname + "/bible_data.lock")) return;
  fs.writeFileSync(__dirname + "/bible_data.lock", hash);

  createJSFile(); // `frontend/src/lib/Scripture/data.ts`
  createGoFile(); // `internal/app/scripture_data.go`
};
