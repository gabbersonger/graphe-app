// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

/**
 * An Attr is a key-value pair.
 */
export class Attr {
    "Key": string;
    "Value": Value;

    /** Creates a new Attr instance. */
    constructor($$source: Partial<Attr> = {}) {
        if (!("Key" in $$source)) {
            this["Key"] = "";
        }
        if (!("Value" in $$source)) {
            this["Value"] = (new Value());
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Attr instance from a string or object.
     */
    static createFrom($$source: any = {}): Attr {
        const $$createField1_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("Value" in $$parsedSource) {
            $$parsedSource["Value"] = $$createField1_0($$parsedSource["Value"]);
        }
        return new Attr($$parsedSource as Partial<Attr>);
    }
}

/**
 * A Handler handles log records produced by a Logger.
 * 
 * A typical handler may print log records to standard error,
 * or write them to a file or database, or perhaps augment them
 * with additional attributes and pass them on to another handler.
 * 
 * Any of the Handler's methods may be called concurrently with itself
 * or with other methods. It is the responsibility of the Handler to
 * manage this concurrency.
 * 
 * Users of the slog package should not invoke Handler methods directly.
 * They should use the methods of [Logger] instead.
 */
export type Handler = any;

/**
 * A Level is the importance or severity of a log event.
 * The higher the level, the more important or severe the event.
 */
export type Level = any;

/**
 * A Logger records structured information about each call to its
 * Log, Debug, Info, Warn, and Error methods.
 * For each call, it creates a [Record] and passes it to a [Handler].
 * 
 * To create a new Logger, call [New] or a Logger method
 * that begins "With".
 */
export class Logger {

    /** Creates a new Logger instance. */
    constructor($$source: Partial<Logger> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Logger instance from a string or object.
     */
    static createFrom($$source: any = {}): Logger {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Logger($$parsedSource as Partial<Logger>);
    }
}

/**
 * A Value can represent any Go value, but unlike type any,
 * it can represent most small values without an allocation.
 * The zero Value corresponds to nil.
 */
export class Value {

    /** Creates a new Value instance. */
    constructor($$source: Partial<Value> = {}) {

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Value instance from a string or object.
     */
    static createFrom($$source: any = {}): Value {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Value($$parsedSource as Partial<Value>);
    }
}

// Private type creation functions
const $$createType0 = Value.createFrom;
