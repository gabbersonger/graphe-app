// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as scripture$0 from "../scripture/models.js";

export class ScriptureBlock {
    "range": scripture$0.ScriptureRange;
    "verses": ScriptureVerse[];

    /** Creates a new ScriptureBlock instance. */
    constructor($$source: Partial<ScriptureBlock> = {}) {
        if (!("range" in $$source)) {
            this["range"] = (new scripture$0.ScriptureRange());
        }
        if (!("verses" in $$source)) {
            this["verses"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureBlock instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureBlock {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType2;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("range" in $$parsedSource) {
            $$parsedSource["range"] = $$createField0_0($$parsedSource["range"]);
        }
        if ("verses" in $$parsedSource) {
            $$parsedSource["verses"] = $$createField1_0($$parsedSource["verses"]);
        }
        return new ScriptureBlock($$parsedSource as Partial<ScriptureBlock>);
    }
}

/**
 * TYPES
 */
export class ScriptureSection {
    "range": scripture$0.ScriptureRange;
    "blocks": ScriptureBlock[];

    /** Creates a new ScriptureSection instance. */
    constructor($$source: Partial<ScriptureSection> = {}) {
        if (!("range" in $$source)) {
            this["range"] = (new scripture$0.ScriptureRange());
        }
        if (!("blocks" in $$source)) {
            this["blocks"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureSection instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureSection {
        const $$createField0_0 = $$createType0;
        const $$createField1_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("range" in $$parsedSource) {
            $$parsedSource["range"] = $$createField0_0($$parsedSource["range"]);
        }
        if ("blocks" in $$parsedSource) {
            $$parsedSource["blocks"] = $$createField1_0($$parsedSource["blocks"]);
        }
        return new ScriptureSection($$parsedSource as Partial<ScriptureSection>);
    }
}

export class ScriptureVerse {
    "ref": scripture$0.ScriptureRef;
    "ref_string": string;
    "words": ScriptureWord[];
    "details"?: ScriptureVerseDetail[];
    "continuation"?: boolean;

    /** Creates a new ScriptureVerse instance. */
    constructor($$source: Partial<ScriptureVerse> = {}) {
        if (!("ref" in $$source)) {
            this["ref"] = (0 as scripture$0.ScriptureRef);
        }
        if (!("ref_string" in $$source)) {
            this["ref_string"] = "";
        }
        if (!("words" in $$source)) {
            this["words"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureVerse instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureVerse {
        const $$createField2_0 = $$createType6;
        const $$createField3_0 = $$createType8;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("words" in $$parsedSource) {
            $$parsedSource["words"] = $$createField2_0($$parsedSource["words"]);
        }
        if ("details" in $$parsedSource) {
            $$parsedSource["details"] = $$createField3_0($$parsedSource["details"]);
        }
        return new ScriptureVerse($$parsedSource as Partial<ScriptureVerse>);
    }
}

export class ScriptureVerseDetail {
    "type": ScriptureVerseDetailType;
    "data"?: string;

    /** Creates a new ScriptureVerseDetail instance. */
    constructor($$source: Partial<ScriptureVerseDetail> = {}) {
        if (!("type" in $$source)) {
            this["type"] = (0 as ScriptureVerseDetailType);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureVerseDetail instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureVerseDetail {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ScriptureVerseDetail($$parsedSource as Partial<ScriptureVerseDetail>);
    }
}

export enum ScriptureVerseDetailType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = 0,

    Title = 0,
    Heading = 1,
};

export class ScriptureWord {
    "word_num": number;
    "text": string;
    "pre": string;
    "post": string;
    "details"?: ScriptureWordDetail[];
    "has_instant_details"?: boolean;

    /** Creates a new ScriptureWord instance. */
    constructor($$source: Partial<ScriptureWord> = {}) {
        if (!("word_num" in $$source)) {
            this["word_num"] = 0;
        }
        if (!("text" in $$source)) {
            this["text"] = "";
        }
        if (!("pre" in $$source)) {
            this["pre"] = "";
        }
        if (!("post" in $$source)) {
            this["post"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureWord instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureWord {
        const $$createField4_0 = $$createType10;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("details" in $$parsedSource) {
            $$parsedSource["details"] = $$createField4_0($$parsedSource["details"]);
        }
        return new ScriptureWord($$parsedSource as Partial<ScriptureWord>);
    }
}

export class ScriptureWordData {
    "version": scripture$0.ScriptureVersion;
    "ref": scripture$0.ScriptureRef;
    "word_number": number;
    "text": string;
    "fields": ScriptureWordDataField[];

    /** Creates a new ScriptureWordData instance. */
    constructor($$source: Partial<ScriptureWordData> = {}) {
        if (!("version" in $$source)) {
            this["version"] = ("" as scripture$0.ScriptureVersion);
        }
        if (!("ref" in $$source)) {
            this["ref"] = (0 as scripture$0.ScriptureRef);
        }
        if (!("word_number" in $$source)) {
            this["word_number"] = 0;
        }
        if (!("text" in $$source)) {
            this["text"] = "";
        }
        if (!("fields" in $$source)) {
            this["fields"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureWordData instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureWordData {
        const $$createField4_0 = $$createType12;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("fields" in $$parsedSource) {
            $$parsedSource["fields"] = $$createField4_0($$parsedSource["fields"]);
        }
        return new ScriptureWordData($$parsedSource as Partial<ScriptureWordData>);
    }
}

export class ScriptureWordDataField {
    "name": string;
    "data": any;

    /** Creates a new ScriptureWordDataField instance. */
    constructor($$source: Partial<ScriptureWordDataField> = {}) {
        if (!("name" in $$source)) {
            this["name"] = "";
        }
        if (!("data" in $$source)) {
            this["data"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureWordDataField instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureWordDataField {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ScriptureWordDataField($$parsedSource as Partial<ScriptureWordDataField>);
    }
}

export class ScriptureWordDetail {
    "type": ScriptureWordDetailType;
    "position"?: boolean;
    "data"?: string;

    /** Creates a new ScriptureWordDetail instance. */
    constructor($$source: Partial<ScriptureWordDetail> = {}) {
        if (!("type" in $$source)) {
            this["type"] = (0 as ScriptureWordDetailType);
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ScriptureWordDetail instance from a string or object.
     */
    static createFrom($$source: any = {}): ScriptureWordDetail {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ScriptureWordDetail($$parsedSource as Partial<ScriptureWordDetail>);
    }
}

export enum ScriptureWordDetailType {
    /**
     * The Go zero value for the underlying type of the enum.
     */
    $zero = 0,

    NewLine = 0,
    Indent = 1,
    Footnote = 2,
    Crossref = 3,
};

// Private type creation functions
const $$createType0 = scripture$0.ScriptureRange.createFrom;
const $$createType1 = ScriptureVerse.createFrom;
const $$createType2 = $Create.Array($$createType1);
const $$createType3 = ScriptureBlock.createFrom;
const $$createType4 = $Create.Array($$createType3);
const $$createType5 = ScriptureWord.createFrom;
const $$createType6 = $Create.Array($$createType5);
const $$createType7 = ScriptureVerseDetail.createFrom;
const $$createType8 = $Create.Array($$createType7);
const $$createType9 = ScriptureWordDetail.createFrom;
const $$createType10 = $Create.Array($$createType9);
const $$createType11 = ScriptureWordDataField.createFrom;
const $$createType12 = $Create.Array($$createType11);
